AWSTemplateFormatVersion: "2010-09-09"

Resources:
# DDB Resources.
  IkkyoneSkierDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "IkkyoneSkierTable"
      AttributeDefinitions:
        - AttributeName: "SkierID"
          AttributeType: "S"
        - AttributeName: "ResortID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "SkierID"
          KeyType: "HASH"
        - AttributeName: "ResortID"
          KeyType: "RANGE"
#      BillingMode: "PAY_PER_REQUEST"  # Ext, 3000RU / 5000WU for handling 512 max clients.
      BillingMode: "PROVISIONED"
      ProvisionedThroughput:
        ReadCapacityUnits: 300
        WriteCapacityUnits: 500
  ServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
  ServerInstancePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - Ref: ServerInstanceRole
      PolicyName: ServerInstancePolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:*"
            Resource: "*"

# EC2 Resources.
  IkkyoneServerInstance01:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-00514a528eadbc95b"  # Amazon Linux
      InstanceType: "t2.micro"
      KeyName: "neu-cs6650"
      SubnetId: "subnet-ed63e78b"
      SecurityGroupIds:
        - {Ref: ServerSecurityGroup}
      IamInstanceProfile: {Ref: ServerInstanceProfile}
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -xue\n"
              - "sudo /opt/aws/bin/cfn-init -v --stack CS6650 "
              - "--resource ServerInstanceProfile "
              - "--configsets SetupTomcat "
              - "--region us-east-1\n"
  IkkyoneServerInstance02:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-00514a528eadbc95b"  # Amazon Linux
      InstanceType: "t2.micro"
      KeyName: "neu-cs6650"
      SubnetId: "subnet-ed63e78b"
      SecurityGroupIds:
        - {Ref: ServerSecurityGroup}
      IamInstanceProfile: {Ref: ServerInstanceProfile}
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -xue\n"
              - "sudo /opt/aws/bin/cfn-init -v --stack CS6650 "
              - "--resource ServerInstanceProfile "
              - "--configsets SetupTomcat "
              - "--region us-east-1\n"
  IkkyoneServerInstance03:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-00514a528eadbc95b"  # Amazon Linux
      InstanceType: "t2.micro"
      KeyName: "neu-cs6650"
      SubnetId: "subnet-ed63e78b"
      SecurityGroupIds:
        - {Ref: ServerSecurityGroup}
      IamInstanceProfile: {Ref: ServerInstanceProfile}
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -xue\n"
              - "sudo /opt/aws/bin/cfn-init -v --stack CS6650 "
              - "--resource ServerInstanceProfile "
              - "--configsets SetupTomcat "
              - "--region us-east-1\n"
  IkkyoneServerInstance04:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-00514a528eadbc95b"  # Amazon Linux
      InstanceType: "t2.micro"
      KeyName: "neu-cs6650"
      SubnetId: "subnet-ed63e78b"
      SecurityGroupIds:
        - {Ref: ServerSecurityGroup}
      IamInstanceProfile: {Ref: ServerInstanceProfile}
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -xue\n"
              - "sudo /opt/aws/bin/cfn-init -v --stack CS6650 "
              - "--resource ServerInstanceProfile "
              - "--configsets SetupTomcat "
              - "--region us-east-1\n"
  IkkyoneServerInstance05:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "ami-00514a528eadbc95b"  # Amazon Linux
      InstanceType: "t2.micro"
      KeyName: "neu-cs6650"
      SubnetId: "subnet-ed63e78b"
      SecurityGroupIds:
        - {Ref: ServerSecurityGroup}
      IamInstanceProfile: {Ref: ServerInstanceProfile}
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - "#!/bin/bash -xue\n"
              - "sudo /opt/aws/bin/cfn-init -v --stack CS6650 "
              - "--resource ServerInstanceProfile "
              - "--configsets SetupTomcat "
              - "--region us-east-1\n"
  ServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          SetupTomcat:
            - SetupTomcat
        SetupTomcat: # Install and start Tomcat8 server on instance boot time.
          commands:
            01InstallJava8:
              command: yes | sudo yum install java-1.8.0
            02RemoveJava7:
              command: yes | sudo yum remove java-1.7.0-openjdk
            03InstallTomcat8:
              command: yes | sudo yum install tomcat8 tomcat8-webapps
            04StartTomcat8:
              command: sudo service tomcat8 start
            05ChmodTomcatWebappsDir:
              command: sudo chmod 777 /var/lib/tomcat8/webapps
            06MkdirClientDir:
              command: sudo mkdir /var/lib/tomcat8/client && sudo chmod 777 /var/lib/tomcat8/client
    Properties:
      Roles:
        - {Ref: ServerInstanceRole}
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: "vpc-7019c90d"   # Default VPC
      GroupDescription: "SG for CS6650 servers"
      SecurityGroupIngress:
        - {CidrIp: "0.0.0.0/0", IpProtocol: "tcp", FromPort: 80, ToPort: 80}
        - {CidrIp: "0.0.0.0/0", IpProtocol: "tcp", FromPort: 8080, ToPort: 8080}
        - {CidrIp: "0.0.0.0/0", IpProtocol: "tcp", FromPort: 443, ToPort: 443}
        - {CidrIp: "0.0.0.0/0", IpProtocol: "tcp", FromPort: 22, ToPort: 22}
      SecurityGroupEgress:
        - {CidrIp: "0.0.0.0/0", IpProtocol: "tcp", FromPort: 0, ToPort: 65535}

# ELB Resources.
  IkkyoneNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      Subnets:
        - "subnet-ed63e78b"
      Type: network
  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - {Type: forward, TargetGroupArn: {Ref: NLBTargetGroup}}
      LoadBalancerArn: {Ref: IkkyoneNLB}
      Port: 8080
      Protocol: TCP
  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8080
      Protocol: TCP
      TargetType: instance
      Targets:
        - {Id: {Ref: IkkyoneServerInstance01}}
        - {Id: {Ref: IkkyoneServerInstance02}}
        - {Id: {Ref: IkkyoneServerInstance03}}
        - {Id: {Ref: IkkyoneServerInstance04}}
      VpcId: "vpc-7019c90d"   # Default VPC

# SQS Resources.
#  IkkyonePOSTQueue:
#    Type: AWS::SQS::Queue
#    Properties:
#      MessageRetentionPeriod: 86400 # 1 Day.
#      VisibilityTimeout: 60
#      QueueName: "IkkyonePOSTQueue"
#      FifoQueue: "true"
#      ContentBasedDeduplication: "true"
#      QueueName: "IkkyonePOSTQueue.fifo"